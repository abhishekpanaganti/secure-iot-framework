#include<openssl/ssl.h>
#include<openssl/err.h>
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include"MQTTClient.h"

// MQTT Parameters
#define BROKER_URL "ssl://test.mosquitto.org:8883"
#define CLIENT_ID "Secure_IoT_Device"
#define TOPIC "iot/secure"
#define QOS 1
#define TIMEOUT 10000L
#define CA_CERT "ca.crt"
#define CLIENT_CERT "client.crt"
#define CLIENT_KEY "client.key"
#define HMAC_KEY "secure_key"
const char* USERNAME;
const char* PASSWORD;

void init_openssl() {
SSL_load_error_strings();
OpenSSL_add_ssl_algorithms();
}
void cleanup_openssl() {
EVP_cleanup();
}
SSL_CTX *create_context() {
    SSL_CTX *ctx = SSL_CTX_new(TLS_client_method());
    if (!ctx) {
        perror("Unable to create SSL context");
        exit(EXIT_FAILURE);
    }
    if (SSL_CTX_load_verify_locations(ctx, CA_CERT, NULL) != 1) {
        fprintf(stderr, "Error loading CA certificates\n");
        exit(EXIT_FAILURE);
    }

if (SSL_CTX_use_certificate_file(ctx, CLIENT_CERT, SSL_FILETYPE_PEM) <= 0) {
        fprintf(stderr, "Error loading client certificate\n");
        exit(EXIT_FAILURE);
    }
    if (SSL_CTX_use_PrivateKey_file(ctx, CLIENT_KEY, SSL_FILETYPE_PEM) <= 0) {
    fprintf(stderr,"Error loading client private key\n");
    exit(EXIT_FAILURE);
    }

    if (!SSL_CTX_check_private_key(ctx)) {
        fprintf(stderr, "Private key does not match the public certificate\n");
        exit(EXIT_FAILURE);
    }
return ctx;
}
void compute_hmac_sha256(const uint8_t *data, size_t length, uint8_t *output) {
unsigned int len;
HMAC(EVP_sha256(), HMAC_KEY, strlen(HMAC_KEY), data, length, output, &len);
}

void check_integrity(uint8_t *data, size_t length, uint8_t *expected_hash) {
    uint8_t computed_hash[SHA256_DIGEST_LENGTH];
    compute_hmac_sha256(data, length, computed_hash);

    if (memcmp(computed_hash, expected_hash, SHA256_DIGEST_LENGTH) != 0) {
        printf("Tampering detected! Data corrupted.\n");
    } else {
        printf("Data integrity verified.\n");
    }
}
void mqtt_publish() {
    MQTTClient client;
    MQTTClient_connectOptions conn_opts = MQTTClient_connectOptions_initializer;
    MQTTClient_SSLOptions ssl_opts = MQTTClient_SSLOptions_initializer;
    MQTTClient_create(&client, BROKER_URL, CLIENT_ID, MQTTCLIENT_PERSISTENCE_NONE, NULL);

conn_opts.keepAliveInterval = 20;
conn_opts.cleansession = 1;
conn_opts.username = USERNAME;
conn_opts.password = PASSWORD;
ssl_opts.trustStore = CA_CERT;
ssl_opts.keyStore = CLIENT_CERT;
ssl_opts.privateKey = CLIENT_KEY;
conn_opts.ssl = &ssl_opts;

if (MQTTClient_connect(client, &conn_opts) != MQTTCLIENT_SUCCESS) {
    printf("Failed to connect to MQTT Broker\n");
    return;
}
    const char *message = "Hello Secure IoT World!";
    MQTTClient_message pubmsg = MQTTClient_message_initializer;
    pubmsg.payload = (void *)message;
    pubmsg.payloadlen = strlen(message);
    pubmsg.qos = QOS;
    pubmsg.retained = 0;

    MQTTClient_publishMessage(client, TOPIC, &pubmsg, NULL);
    printf("Message published\n");

    MQTTClient_disconnect(client, TIMEOUT);
    MQTTClient_destroy(&client);
}
int main() {
    USERNAME = getenv("MQTT_USERNAME");
    PASSWORD = getenv("MQTT_PASSWORD");

    if (!USERNAME || !PASSWORD) {
        fprintf(stderr, "Error: MQTT credentials not set.\n");
        return EXIT_FAILURE;
    }
    init_openssl();
    SSL_CTX *ctx = create_context();

    mqtt_publish();
    cleanup_openssl();
    return 0;
}
